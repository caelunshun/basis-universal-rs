/* automatically generated by rust-bindgen 0.54.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basisu_transcoder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basisu_etc1_global_selector_codebook {
    _unused: [u8; 0],
}
extern "C" {
    pub fn basisu_transcoder_init();
}
extern "C" {
    pub fn basisu_etc1_global_selector_codebook_new() -> *mut basisu_etc1_global_selector_codebook;
}
extern "C" {
    pub fn basisu_transcoder_new(
        global_sel_codebook: *const basisu_etc1_global_selector_codebook,
    ) -> *mut basisu_transcoder;
}
pub const basisu_transcoder_format_basisu_TFETC1_RGB: basisu_transcoder_format = 0;
pub const basisu_transcoder_format_basisu_TFETC2_RGBA: basisu_transcoder_format = 1;
pub const basisu_transcoder_format_basisu_TFBC1_RGB: basisu_transcoder_format = 2;
pub const basisu_transcoder_format_basisu_TFBC3_RGBA: basisu_transcoder_format = 3;
pub const basisu_transcoder_format_basisu_TFBC4_R: basisu_transcoder_format = 4;
pub const basisu_transcoder_format_basisu_TFBC5_RG: basisu_transcoder_format = 5;
pub const basisu_transcoder_format_basisu_TFBC7_RGBA: basisu_transcoder_format = 6;
pub const basisu_transcoder_format_basisu_TFPVRTC1_4_RGB: basisu_transcoder_format = 8;
pub const basisu_transcoder_format_basisu_TFPVRTC1_4_RGBA: basisu_transcoder_format = 9;
pub const basisu_transcoder_format_basisu_TFASTC_4x4_RGBA: basisu_transcoder_format = 10;
pub const basisu_transcoder_format_basisu_TFATC_RGB: basisu_transcoder_format = 11;
pub const basisu_transcoder_format_basisu_TFATC_RGBA: basisu_transcoder_format = 12;
pub const basisu_transcoder_format_basisu_TFFXT1_RGB: basisu_transcoder_format = 17;
pub const basisu_transcoder_format_basisu_TFPVRTC2_4_RGB: basisu_transcoder_format = 18;
pub const basisu_transcoder_format_basisu_TFPVRTC2_4_RGBA: basisu_transcoder_format = 19;
pub const basisu_transcoder_format_basisu_TFETC2_EAC_R11: basisu_transcoder_format = 20;
pub const basisu_transcoder_format_basisu_TFETC2_EAC_RG11: basisu_transcoder_format = 21;
pub const basisu_transcoder_format_basisu_TFRGBA32: basisu_transcoder_format = 13;
pub const basisu_transcoder_format_basisu_TFRGB565: basisu_transcoder_format = 14;
pub const basisu_transcoder_format_basisu_TFBGR565: basisu_transcoder_format = 15;
pub const basisu_transcoder_format_basisu_TFRGBA4444: basisu_transcoder_format = 16;
pub const basisu_transcoder_format_cTFTotalTextureFormats: basisu_transcoder_format = 22;
pub type basisu_transcoder_format = u32;
pub const basisu_texture_type_basisu_tex_type_2d: basisu_texture_type = 0;
pub const basisu_texture_type_basisu_tex_type_2d_array: basisu_texture_type = 1;
pub const basisu_texture_type_basisu_tex_type_cubemap_array: basisu_texture_type = 2;
pub const basisu_texture_type_basisu_tex_type_video: basisu_texture_type = 3;
pub const basisu_texture_type_basisu_tex_type_volume: basisu_texture_type = 4;
pub const basisu_texture_type_cBASISTexTypeTotal: basisu_texture_type = 5;
pub type basisu_texture_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basisu_file_info {
    pub texture_type: basisu_texture_type,
    pub us_per_frame: u32,
    pub total_images: u32,
    pub etc1s: ::std::os::raw::c_int,
    pub has_alpha_slices: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_basisu_file_info() {
    assert_eq!(
        ::std::mem::size_of::<basisu_file_info>(),
        20usize,
        concat!("Size of: ", stringify!(basisu_file_info))
    );
    assert_eq!(
        ::std::mem::align_of::<basisu_file_info>(),
        4usize,
        concat!("Alignment of ", stringify!(basisu_file_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_file_info>())).texture_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_file_info),
            "::",
            stringify!(texture_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_file_info>())).us_per_frame as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_file_info),
            "::",
            stringify!(us_per_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_file_info>())).total_images as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_file_info),
            "::",
            stringify!(total_images)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_file_info>())).etc1s as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_file_info),
            "::",
            stringify!(etc1s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_file_info>())).has_alpha_slices as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_file_info),
            "::",
            stringify!(has_alpha_slices)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basisu_image_info {
    pub image_index: u32,
    pub total_levels: u32,
    pub orig_width: u32,
    pub orig_height: u32,
    pub width: u32,
    pub height: u32,
    pub num_blocks_x: u32,
    pub num_blocks_y: u32,
    pub total_blocks: u32,
    pub first_slice_index: u32,
    pub alpha_flag: ::std::os::raw::c_int,
    pub iframe_flag: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_basisu_image_info() {
    assert_eq!(
        ::std::mem::size_of::<basisu_image_info>(),
        48usize,
        concat!("Size of: ", stringify!(basisu_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<basisu_image_info>(),
        4usize,
        concat!("Alignment of ", stringify!(basisu_image_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).image_index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(image_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).total_levels as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(total_levels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).orig_width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(orig_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).orig_height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(orig_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).height as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).num_blocks_x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(num_blocks_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).num_blocks_y as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(num_blocks_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).total_blocks as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(total_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_info>())).first_slice_index as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(first_slice_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).alpha_flag as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(alpha_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_info>())).iframe_flag as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_info),
            "::",
            stringify!(iframe_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basisu_image_level_info {
    pub image_index: u32,
    pub level_index: u32,
    pub orig_width: u32,
    pub orig_height: u32,
    pub width: u32,
    pub height: u32,
    pub num_blocks_x: u32,
    pub num_blocks_y: u32,
    pub total_blocks: u32,
    pub first_slice_index: u32,
    pub alpha_flag: ::std::os::raw::c_int,
    pub iframe_flag: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_basisu_image_level_info() {
    assert_eq!(
        ::std::mem::size_of::<basisu_image_level_info>(),
        48usize,
        concat!("Size of: ", stringify!(basisu_image_level_info))
    );
    assert_eq!(
        ::std::mem::align_of::<basisu_image_level_info>(),
        4usize,
        concat!("Alignment of ", stringify!(basisu_image_level_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).image_index as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(image_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).level_index as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(level_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).orig_width as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(orig_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).orig_height as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(orig_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_level_info>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<basisu_image_level_info>())).height as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).num_blocks_x as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(num_blocks_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).num_blocks_y as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(num_blocks_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).total_blocks as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(total_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).first_slice_index as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(first_slice_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).alpha_flag as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(alpha_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<basisu_image_level_info>())).iframe_flag as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(basisu_image_level_info),
            "::",
            stringify!(iframe_flag)
        )
    );
}
extern "C" {
    pub fn basisu_get_texture_type(
        transcoder: *const basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
    ) -> basisu_texture_type;
}
extern "C" {
    pub fn basisu_get_total_images(
        transcoder: *const basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
    ) -> u32;
}
extern "C" {
    pub fn basisu_get_total_image_levels(
        transcoder: *const basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
        image_index: u32,
    ) -> u32;
}
extern "C" {
    pub fn basisu_get_image_level_desc(
        transcoder: *const basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
        image_index: u32,
        level_index: u32,
        orig_width: *mut u32,
        orig_height: *mut u32,
        total_blocks: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basisu_get_image_info(
        transcoder: *const basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
        info: *mut basisu_image_info,
        image_index: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basisu_get_image_level_info(
        transcoder: *const basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
        info: *mut basisu_image_level_info,
        image_index: u32,
        level_index: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basisu_get_file_info(
        transcoder: *const basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
        file_info: *mut basisu_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basisu_start_transcoding(
        transcoder: *mut basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basisu_stop_transcoding(transcoder: *mut basisu_transcoder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basisu_transcode_image_level(
        transcoder: *mut basisu_transcoder,
        data: *const ::std::os::raw::c_void,
        data_len: u32,
        image_index: u32,
        level_index: u32,
        output_blocks: *mut ::std::os::raw::c_void,
        output_blocks_buf_size_in_blocks_or_pixels: u32,
        format: basisu_transcoder_format,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn basisu_transcoder_free(transcoder: *mut basisu_transcoder);
}
